# -*- coding: utf-8 -*-
"""Linear Regression Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdbO6sAHBTc1qiXACpwPmN35Ao3tL_7r

# Linear Regression Machine Learning Project for House Price Prediction

**Import Libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

"""**Load Dataset**"""

data_path = '/content/Housing.csv'
HouseDF = pd.read_csv(data_path)

"""**Display Dataset Information**"""

print("Dataset Info:")
print(HouseDF.info())

"""**Display First Few Rows**"""

print("\nFirst few rows of the dataset:")
print(HouseDF.head())

"""**Handle Missing Values**"""

if HouseDF.isnull().values.any():
    HouseDF.fillna(HouseDF.mean(), inplace=True)

"""**Covert Categorical columns to Numeric Using One-Hot Encoding**"""

non_numeric_columns = HouseDF.select_dtypes(exclude=['number']).columns
HouseDF = pd.get_dummies(HouseDF, columns=non_numeric_columns)

"""**Prepare Data for Training**"""

X = HouseDF.drop(columns=['price'])  # Exclude the target variable 'price'
y = HouseDF['price']

"""**Split Data into Training and Testing Sets**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Train the Linear Regression Model**"""

model = LinearRegression()
model.fit(X_train, y_train)

"""**Save the features names**"""

feature_names = X_train.columns.tolist()
with open('feature_names.pkl', 'wb') as f:
    joblib.dump(feature_names, f)

"""**Make Predictions**"""

y_pred = model.predict(X_test)

"""**Evaluate the Model**"""

mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

"""**Save the Trained Model**"""

joblib.dump(model, 'linear_regression_model.pkl')
print("Model saved.")

"""#Plotting and Visualization

**1. Correlation Heatmap**
"""

plt.figure(figsize=(12, 10))
correlation_matrix = HouseDF.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""**2. Distribution of House Prices**"""

plt.figure(figsize=(10, 6))
sns.histplot(y, bins=30, kde=True)
plt.title('Distribution of House Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

"""**3. Residuals Plot**"""

residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_pred, y=residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Residuals Plot')
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals')
plt.show()

"""**4. Actual vs. predicted Prices**"""

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linewidth=2)
plt.title('Actual vs Predicted Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.show()

"""**5. Features Importance (Coefficients in Linear Regression)**"""

feature_importance = pd.DataFrame({'Feature': X_train.columns, 'Importance': model.coef_})
feature_importance = feature_importance.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()